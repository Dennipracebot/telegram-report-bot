import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from telegram.error import Conflict
from deep_translator import GoogleTranslator

# üîë –¢–≤—ñ–π —Ç–æ–∫–µ–Ω —ñ Telegram ID
TOKEN = os.getenv('TOKEN')
ADMIN_ID = int(os.getenv(ADMIN_ID))

# üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ
PHOTO_DIR = "received_photos"
os.makedirs(PHOTO_DIR, exist_ok=True)

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç —Ç–∞ —Ñ–æ—Ç–æ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏).\nDobr√Ω den! Napi≈°te popis proveden√Ωch prac√≠ a fotku (pokud je pot≈ôeba).")

# üì® –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    msg = update.message.text or "–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–∞–π–ª –∞–±–æ —Ñ–æ—Ç–æ"

    # üåê –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞ —á–µ—Å—å–∫—É
    translated_msg = GoogleTranslator(source='auto', target='cs').translate(msg)
    full_message = f"{msg}\n\nP≈ôeklad do ƒçe≈°tiny:\n{translated_msg}"

    # üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    username = f"@{user.username}" if user.username else "(–±–µ–∑ username)"
    user_info = f"{first_name} {last_name}".strip()

    # üíæ –Ø–∫—â–æ —î —Ñ–æ—Ç–æ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
    if update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_path = os.path.join(PHOTO_DIR, f"{user.id}_{file.file_id}.jpg")
        await file.download_to_drive(file_path)
        full_message += f"\n\n[–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {file_path}]"

    # üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ó–≤—ñ—Ç –≤—ñ–¥ {user_info} {username} (ID: {user.id}):\n{full_message}"
    )

    # ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É
    await update.message.reply_text("–ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\nHl√°≈°en√≠ bylo odesl√°no administr√°torovi.")

# üîÅ –ö–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    user_id = context.args[0]
    message_text = " ".join(context.args[1:])
    try:
        await context.bot.send_message(chat_id=int(user_id), text=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}")
        await update.message.reply_text("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    try:
        app = ApplicationBuilder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("reply", reply_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(filters.PHOTO, handle_message))
        app.run_polling()
    except Conflict:
        print("‚ùå –ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π –≤ —ñ–Ω—à–æ–º—É –≤—ñ–∫–Ω—ñ. –ó–∞–∫—Ä–∏–π –π–æ–≥–æ —ñ —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É.")